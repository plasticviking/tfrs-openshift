apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: mem-tfrs-dev
objects:
- apiVersion: v1
  data:
    caddyfile: |-
      0.0.0.0:2015

      root /var/www/html

      log stdout

      errors stdout

      gzip

      proxy / http://{%REQUEST_LOGGER_SERVICE_HOST%}:{%REQUEST_LOGGER_SERVICE_PORT%} {
          transparent
      }
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: caddyfile
- apiVersion: v1
  data:
    reques_logger.py: |-
      from flask import Flask, request
      app = Flask(__name__)

      @app.route('/', defaults={'path': ''})
      @app.route('/<path:path>')
      def dump_headers(path):
        #print('{}\n\n'.format(request.method + ' ' + request.url))
        #print(request.headers)
        return '{}\n\nHEADERS:\n{}'.format(request.method + ' ' + request.url, str(request.headers)), 200, {'Content-Type': 'text/plain; charset=utf-8'}
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: reques-logger
- apiVersion: v1
  data:
    filters.properties: "addport=6789\r\npass=pass123"
    key1: conifg3
  kind: ConfigMap
  metadata:
    creationTimestamp: null
    name: test-config
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: admin
  roleRef:
    name: admin
  subjects:
  - kind: User
    name: sheaphillips
  - kind: User
    name: rajpersram
  - kind: User
    name: kuanfandevops
  - kind: User
    name: cvarjao
  - kind: User
    name: amichard
  userNames:
  - sheaphillips
  - rajpersram
  - kuanfandevops
  - cvarjao
  - amichard
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: edit
  roleRef:
    name: edit
  subjects:
  - kind: ServiceAccount
    name: default
    namespace: mem-tfrs-tools
  - kind: User
    name: dmarley
  - kind: User
    name: swcurran
  - kind: User
    name: GeorgeWalker
  - kind: User
    name: dainetrinidad
  - kind: User
    name: rstens
  - kind: ServiceAccount
    name: jenkins
    namespace: mem-tfrs-tools
  - kind: User
    name: DerekRoberts
  userNames:
  - system:serviceaccount:mem-tfrs-tools:default
  - dmarley
  - swcurran
  - GeorgeWalker
  - dainetrinidad
  - rstens
  - system:serviceaccount:mem-tfrs-tools:jenkins
  - DerekRoberts
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: system:deployers
  roleRef:
    name: system:deployer
  subjects:
  - kind: ServiceAccount
    name: deployer
    namespace: mem-tfrs-dev
  userNames:
  - system:serviceaccount:mem-tfrs-dev:deployer
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: system:image-builders
  roleRef:
    name: system:image-builder
  subjects:
  - kind: ServiceAccount
    name: builder
    namespace: mem-tfrs-dev
  userNames:
  - system:serviceaccount:mem-tfrs-dev:builder
- apiVersion: v1
  groupNames:
  - system:serviceaccounts:mem-tfrs-dev
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: system:image-pullers
  roleRef:
    name: system:image-puller
  subjects:
  - kind: ServiceAccount
    name: default
    namespace: mem-tfrs-tools
  - kind: SystemGroup
    name: system:serviceaccounts:mem-tfrs-dev
  userNames:
  - system:serviceaccount:mem-tfrs-tools:default
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    creationTimestamp: null
    name: view
  roleRef:
    name: view
  subjects:
  - kind: User
    name: matthewhall78
  - kind: User
    name: swcurran
  - kind: SystemUser
    name: system:serviceaccount:mem-tfrs-dev:system:serviceaccount:mem-tfrs-tools:jenkins
  userNames:
  - matthewhall78
  - swcurran
  - system:serviceaccount:mem-tfrs-dev:system:serviceaccount:mem-tfrs-tools:jenkins
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-class: gluster-file
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
    creationTimestamp: null
    name: backup-cns
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 5Gi
    volumeName: pvc-5c9c41a5-20ce-11e8-809f-0050568379a2
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-class: gluster-file
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
    creationTimestamp: null
    name: postgresql-backup-cns
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 5Gi
    volumeName: pvc-41929239-1cdc-11e8-8a7d-005056832285
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-class: gluster-file
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
    creationTimestamp: null
    name: postgresql-bypass-cns
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    volumeName: pvc-cccc95a2-1369-11e8-844f-005056832285
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-class: gluster-file
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
    creationTimestamp: null
    name: postgresql-cns
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 5Gi
    volumeName: pvc-7f1938e3-fd6f-11e7-b70e-005056832285
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    annotations:
      pv.kubernetes.io/bind-completed: "yes"
      pv.kubernetes.io/bound-by-controller: "yes"
      volume.beta.kubernetes.io/storage-class: gluster-file
      volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/glusterfs
    creationTimestamp: null
    name: postgresql-standby-cns
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 5Gi
    volumeName: pvc-03f2bc9c-1dab-11e8-8a7d-005056832285
  status: {}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    creationTimestamp: null
    labels:
      build: caddy-app
      template: caddy-template
    name: caddy-app
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: caddy-app:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: /utils/caddy-proxy
      git:
        uri: https://github.com/BCDevOps/openshift-tools.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: bcgov-s2i-caddy:latest
          namespace: openshift
      type: Source
    triggers:
    - github:
        secret: dLUFqHx4HXi80yTFi5rEaEfbcaoFLtLxsPF5nFJe
      type: GitHub
    - generic:
        secret: KmbAl3HF5ttakkEvGyV20RXwrXge1XhuSQbQPdch
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: request-logger
    name: request-logger
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: request-logger:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: /utils/request_logger
      git:
        ref: master
        uri: https://github.com/bcdevops/openshift-tools/
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:3.5
          namespace: openshift
      type: Source
    triggers:
    - generic:
        secret: d8ba7ff148c0970c
      type: Generic
    - github:
        secret: e27a392996821e2d
      type: GitHub
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange
  status:
    lastVersion: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: caddy-app
      template: caddy-template
    name: caddy-app
  spec:
    replicas: 0
    selector:
      app: caddy-app
      deploymentconfig: caddy-app
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/container.pathfinder.image.entrypoint: '["/sbin/tini","caddy","-quic","--conf","/etc/Caddyfile"]'
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          app: caddy-app
          deploymentconfig: caddy-app
      spec:
        containers:
        - image: 172.50.0.2:5000/mem-tfrs-dev/caddy-app@sha256:d55f8cb8d03c061186d1c0fcb32347dec5e2cb05d73a25ec4fa78522cf31ea36
          imagePullPolicy: Always
          name: caddy-app
          ports:
          - containerPort: 2015
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc
            name: caddyfile-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: caddyfile
              path: Caddyfile
            name: caddyfile
          name: caddyfile-volume
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - caddy-app
        from:
          kind: ImageStreamTag
          name: caddy-app:latest
          namespace: mem-tfrs-dev
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
    creationTimestamp: null
    generation: 1
    labels:
      template: tfrs-app-environment
    name: client
  spec:
    replicas: 1
    selector:
      name: client
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: client
        name: client
      spec:
        containers:
        - env:
          - name: RealIpFrom
          - name: AdditionalRealIpFromRules
          - name: IpFilterRules
          - name: HTTP_BASIC
          - name: API_URL
            value: http://backend.mem-tfrs-dev.svc.cluster.local:8080/api/
          image: 172.50.0.2:5000/mem-tfrs-tools/client-develop@sha256:127388e9d93451b039d0741d53784db4cb617c58d6524e2af8f6fd7d9c235336
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: client
          ports:
          - containerPort: 3000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - client
        from:
          kind: ImageStreamTag
          name: client-develop:dev
          namespace: mem-tfrs-tools
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql
  spec:
    replicas: 1
    selector:
      name: postgresql
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_DATABASE
            value: tfrs
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: DATABASE_USER
                name: tfrs-postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: DATABASE_PASSWORD
                name: tfrs-postgresql
          image: registry.access.redhat.com/rhscl/postgresql-95-rhel7@sha256:f90b4ce7c2328e2f38d01e37b3a69cf60f06433df907ecb9432b0934af9624ed
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 2Gi
            requests:
              cpu: 500m
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
          - mountPath: /postgresql-backup
            name: volume-r83io
          - mountPath: /backup
            name: volume-wh3ob
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql-cns
        - name: volume-r83io
          persistentVolumeClaim:
            claimName: postgresql-backup-cns
        - name: volume-wh3ob
          persistentVolumeClaim:
            claimName: postgresql-standby-cns
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql-bypass
  spec:
    replicas: 1
    selector:
      name: postgresql-bypass
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: postgresql-bypass
      spec:
        containers:
        - env:
          - name: POSTGRESQL_DATABASE
            value: tfrs
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: DATABASE_USER
                name: tfrs-postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: DATABASE_PASSWORD
                name: tfrs-postgresql
          image: registry.access.redhat.com/rhscl/postgresql-95-rhel7@sha256:f90b4ce7c2328e2f38d01e37b3a69cf60f06433df907ecb9432b0934af9624ed
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql-bypass
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data-bypass
          - mountPath: /postgresql-backup
            name: volume-s540c
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgresql-data-bypass
          persistentVolumeClaim:
            claimName: postgresql-bypass-cns
        - name: volume-s540c
          persistentVolumeClaim:
            claimName: postgresql-backup-cns
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql-bypass
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql-standby
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: postgresql-standby
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: postgresql-standby
      spec:
        containers:
        - env:
          - name: POSTGRESQL_DATABASE
            value: tfrs
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: DATABASE_USER
                name: tfrs-postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: DATABASE_PASSWORD
                name: tfrs-postgresql
          image: registry.access.redhat.com/rhscl/postgresql-95-rhel7@sha256:f90b4ce7c2328e2f38d01e37b3a69cf60f06433df907ecb9432b0934af9624ed
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql-standby
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c
                'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data-standby
          - mountPath: /postgresql-backup
            name: volume-7v94a
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgresql-data-standby
          persistentVolumeClaim:
            claimName: postgresql-standby-cns
        - name: volume-7v94a
          persistentVolumeClaim:
            claimName: postgresql-backup-cns
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql-standby
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    generation: 1
    labels:
      app: request-logger
    name: request-logger
  spec:
    replicas: 1
    selector:
      deploymentconfig: request-logger
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: request-logger
          deploymentconfig: request-logger
      spec:
        containers:
        - image: 172.50.0.2:5000/mem-tfrs-tools/request-logger@sha256:bd2071b048447812c46073e247953b7747240033765e60c9ebf3604060566403
          imagePullPolicy: Always
          name: request-logger
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/app-root/src
            name: volume-8g9sa
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: reques_logger.py
              path: request_logger.py
            name: reques-logger
          name: volume-8g9sa
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - request-logger
        from:
          kind: ImageStreamTag
          name: request-logger:latest
          namespace: mem-tfrs-tools
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the container.
    creationTimestamp: null
    generation: 1
    name: schema-spy
  spec:
    replicas: 1
    selector:
      name: schema-spy
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: schema-spy
        name: schema-spy
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: postgresql
          - name: POSTGRESQL_DATABASE
            value: tfrs
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: DATABASE_USER
                name: tfrs-postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: DATABASE_PASSWORD
                name: tfrs-postgresql
          image: 172.50.0.2:5000/mem-tfrs-tools/schema-spy@sha256:7a420819e019200ec98ebebe06388872f2f72f37baa7c64162a4a4d4909bcfbf
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3000
          name: schema-spy
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3000
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - schema-spy
        from:
          kind: ImageStreamTag
          name: schema-spy:latest
          namespace: mem-tfrs-tools
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
    creationTimestamp: null
    generation: 1
    labels:
      template: tfrs-app-environment
    name: tfrs
  spec:
    replicas: 1
    selector:
      name: tfrs
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        mid:
          execNewPod:
            command:
            - /bin/sh
            - -c
            - python manage.py migrate
            containerName: tfrs-app
          failurePolicy: Abort
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: tfrs
        name: tfrs
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: postgresql
          - name: DATABASE_ENGINE
            value: postgresql
          - name: DATABASE_NAME
            value: tfrs
          - name: APP_CONFIG
            value: /opt/app-root/src/gunicorn.cfg
          - name: DJANGO_DEBUG
            value: "True"
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                key: DATABASE_USER
                name: tfrs-postgresql
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: DATABASE_PASSWORD
                name: tfrs-postgresql
          image: 172.50.0.2:5000/mem-tfrs-tools/tfrs-develop@sha256:c33fb861288fb55b44a499b9d7aaee1a6ebd14b51137612952b5934b8b013506
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: tfrs-app
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - tfrs-app
        from:
          kind: ImageStreamTag
          name: tfrs-develop:dev
          namespace: mem-tfrs-tools
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
    creationTimestamp: null
    generation: 1
    labels:
      template: tfrs-app-environment
    name: tfrs-bypass
  spec:
    replicas: 1
    selector:
      name: tfrs-bypass
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        mid:
          execNewPod:
            command:
            - /bin/sh
            - -c
            - python manage.py migrate
            containerName: tfrs-bypass-app
          failurePolicy: Abort
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: tfrs-bypass
        name: tfrs-bypass
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: postgresql-bypass
          - name: DATABASE_ENGINE
            value: postgresql
          - name: DATABASE_NAME
            value: tfrs
          - name: APP_CONFIG
          - name: DJANGO_DEBUG
            value: "True"
          - name: BYPASS_HEADER_AUTHENTICATION
            value: "True"
          - name: DATABASE_USER
            valueFrom:
              secretKeyRef:
                key: DATABASE_USER
                name: tfrs-postgresql
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: DATABASE_PASSWORD
                name: tfrs-postgresql
          image: 172.50.0.2:5000/mem-tfrs-tools/tfrs-bypass@sha256:83bfb277ec67d5880b8531a9fed087f3a7a384576696ff0f672a8a6ee893c20f
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          name: tfrs-bypass-app
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 250m
              memory: 256Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - tfrs-bypass-app
        from:
          kind: ImageStreamTag
          name: tfrs-bypass:dev
          namespace: mem-tfrs-tools
      type: ImageChange
    - type: ConfigChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "postgresql", "kind": "Service"}]'
    creationTimestamp: null
    labels:
      template: tfrs-app-environment
    name: backend
  spec:
    ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: tfrs
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/dependencies: '[{"name": "postgresql", "kind": "Service"}]'
    creationTimestamp: null
    labels:
      template: tfrs-app-environment
    name: backend-bypass
  spec:
    ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: tfrs-bypass
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: caddy-app
      template: caddy-template
    name: caddy-app
  spec:
    ports:
    - name: 2015-tcp
      port: 2015
      protocol: TCP
      targetPort: 2015
    selector:
      app: caddy-app
      deploymentconfig: caddy-app
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the front end pods
    creationTimestamp: null
    labels:
      template: tfrs-app-environment
    name: client
  spec:
    ports:
    - name: web
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: client
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: glusterfs-cluster-app
  spec:
    ports:
    - port: 1
      protocol: TCP
      targetPort: 1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      gluster.kubernetes.io/provisioned-for-pvc: backup-cns
    name: glusterfs-dynamic-backup-cns
  spec:
    ports:
    - port: 1
      protocol: TCP
      targetPort: 1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      gluster.kubernetes.io/provisioned-for-pvc: postgresql-backup-cns
    name: glusterfs-dynamic-postgresql-backup-cns
  spec:
    ports:
    - port: 1
      protocol: TCP
      targetPort: 1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      gluster.kubernetes.io/provisioned-for-pvc: postgresql-bypass-cns
    name: glusterfs-dynamic-postgresql-bypass-cns
  spec:
    ports:
    - port: 1
      protocol: TCP
      targetPort: 1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      gluster.kubernetes.io/provisioned-for-pvc: postgresql-cns
    name: glusterfs-dynamic-postgresql-cns
  spec:
    ports:
    - port: 1
      protocol: TCP
      targetPort: 1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      gluster.kubernetes.io/provisioned-for-pvc: postgresql-standby-cns
    name: glusterfs-dynamic-postgresql-standby-cns
  spec:
    ports:
    - port: 1
      protocol: TCP
      targetPort: 1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: postgresql-persistent
      template: postgresql-persistent-template
    name: postgresql-bypass
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: postgresql-bypass
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftWebConsole
    creationTimestamp: null
    labels:
      app: request-logger
    name: request-logger
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: request-logger
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
    creationTimestamp: null
    name: schema-spy
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      name: schema-spy
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    labels:
      template: tfrs-app-environment
    name: api
  spec:
    host: dev-lowcarbonfuels.pathfinder.bcgov
    path: /api
    port:
      targetPort: web
    tls:
      certificate: |-
        -----BEGIN CERTIFICATE-----
        MIIEnzCCAysCCQC70lrFEhRTmzANBgkqhkiG9w0BAQUFADCBtDELMAkGA1UEBhMC
        Q0ExGTAXBgNVBAgMEEJyaXRpc2ggQ29sdW1iaWExETAPBgNVBAcMCFZpY3Rvcmlh
        MTcwNQYDVQQKDC5Hb3Zlcm5tZW50IG9mIHRoZSBQcm92aW5jZSBvZiBCcml0aXNo
        IENvbHVtYmlhMRAwDgYDVQQLDAdGTE5ST1JEMSwwKgYDVQQDDCNkZXYtbG93Y2Fy
        Ym9uZnVlbHMucGF0aGZpbmRlci5iY2dvdjAgFw0xODAzMjcxOTU1MDVaGA8yMTE4
        MDMwMzE5NTUwNVowgbQxCzAJBgNVBAYTAkNBMRkwFwYDVQQIDBBCcml0aXNoIENv
        bHVtYmlhMREwDwYDVQQHDAhWaWN0b3JpYTE3MDUGA1UECgwuR292ZXJubWVudCBv
        ZiB0aGUgUHJvdmluY2Ugb2YgQnJpdGlzaCBDb2x1bWJpYTEQMA4GA1UECwwHRkxO
        Uk9SRDEsMCoGA1UEAwwjZGV2LWxvd2NhcmJvbmZ1ZWxzLnBhdGhmaW5kZXIuYmNn
        b3YwggF9MA0GCSqGSIb3DQEBAQUAA4IBagAwggFlAoIBXAG9/eTOOvWECOKFcCiZ
        JbdNEviEXFTwxkaeL8c8QAO6hO1gPJ4IesJZIduB+fURxMuqG0alSAhMqxHpbNPh
        ylPbI2mq1OfCztfvZfyxN5eH8Jnp0B2vJ3qBRTbtWIYgXdFtGAKUd4ZFA37p87zu
        Un5GdIpnSJITwnmhlVLMMIMo2Xz1frlOqsTTlGR2hLGsam/dggH3zRrKW8GDWWGJ
        MTOSCGJj+m0wwFQDk6Ln8qVmzlUEIbDzbQo4YWVBZB8/SP6noH+4TnCcGUGMh5vE
        wQYLlUf4e1ZqQ6oTSMDn96IFoQQD2ggZv9zmclue25oh0+PVUEO1mxTrR22M7CVX
        WDvWjzoCs1SL2/QXF1trT2KVtr7Dng4mMxnn4Z8Fu54hQ4dMw7bxYGc+LhVF1ozZ
        Ev0xp7Fh0vpRsPWg0XyvTU9S371OC7jLEQvtIyiWyjObeeJZieVKt3EGAzfB/QID
        AQABMA0GCSqGSIb3DQEBBQUAA4IBXQAABX/H8Wqh6hN+0ik8od69SGULG/dMpuvD
        1Q70m4lv3T6g3mkO1x9MrRyOJSQf7QqDRDd8aIphDTE+fEd1LkTtFOQ/K1RK+ZEK
        QB8KbV8XsygQ6s7lmx3xCSEuwoCc0gMLuxqw841RW8lTxqWDlEnvcYQxQWcw+NQ+
        Ky0pEr3leuIO5LZ2fi7Fi/8Ezf8Ef6rUX3JZ0M26wQExFNAUbHN7x5cPOtgXwQxy
        zEi6O5+yaxnf+PXfM8kcQAChQN3z6pc3Nlv9Xcp2Spu16hRsWxFcDminsM6/9PuJ
        6Li1JSPsXFfuqgkQFRrDZSWvRbS85h+F6/RC9x14fDBw33kQAJyr/yK+0YAZbBfR
        fdnQzLTpYFIBs5tvZv+zGjzVSa+rYhbrhFPrkXxjPzEKiecBQ0aiuRLXfbxtBpT6
        rNuhviM2pnmk9lxV3DNPIUH85n3FVM7arGJ5i9lUtf+UI9A=
        -----END CERTIFICATE-----
      key: |-
        -----BEGIN RSA PRIVATE KEY-----
        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
        QD9lYXa3wU4mqnSvawaJ+g==
        -----END RSA PRIVATE KEY-----
      termination: edge
    to:
      kind: Service
      name: backend
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2018-04-17T18:50:40Z
        status: "True"
        type: Admitted
      host: dev-lowcarbonfuels.pathfinder.bcgov
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    creationTimestamp: null
    name: api-bypass
  spec:
    host: api-bypass-mem-tfrs-dev.pathfinder.gov.bc.ca
    path: /api
    port:
      targetPort: web
    to:
      kind: Service
      name: backend-bypass
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2018-02-16T23:09:46Z
        status: "True"
        type: Admitted
      host: api-bypass-mem-tfrs-dev.pathfinder.gov.bc.ca
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    labels:
      template: tfrs-app-environment
    name: api-spec
  spec:
    host: api-spec-mem-tfrs-dev.pathfinder.gov.bc.ca
    path: /api
    port:
      targetPort: web
    to:
      kind: Service
      name: backend-bypass
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2018-03-09T18:51:40Z
        status: "True"
        type: Admitted
      host: api-spec-mem-tfrs-dev.pathfinder.gov.bc.ca
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    name: caddy-app
  spec:
    host: tfrs-dev-caddy-proxy.pathfinder.gov.bc.ca
    port:
      targetPort: 2015-tcp
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: caddy-app
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2017-11-29T19:47:30Z
        status: "True"
        type: Admitted
      host: tfrs-dev-caddy-proxy.pathfinder.gov.bc.ca
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    labels:
      template: tfrs-app-environment
    name: main
  spec:
    host: dev-lowcarbonfuels.pathfinder.bcgov
    path: /
    port:
      targetPort: web
    tls:
      certificate: |-
        -----BEGIN CERTIFICATE-----
        MIIEnzCCAysCCQC70lrFEhRTmzANBgkqhkiG9w0BAQUFADCBtDELMAkGA1UEBhMC
        Q0ExGTAXBgNVBAgMEEJyaXRpc2ggQ29sdW1iaWExETAPBgNVBAcMCFZpY3Rvcmlh
        MTcwNQYDVQQKDC5Hb3Zlcm5tZW50IG9mIHRoZSBQcm92aW5jZSBvZiBCcml0aXNo
        IENvbHVtYmlhMRAwDgYDVQQLDAdGTE5ST1JEMSwwKgYDVQQDDCNkZXYtbG93Y2Fy
        Ym9uZnVlbHMucGF0aGZpbmRlci5iY2dvdjAgFw0xODAzMjcxOTU1MDVaGA8yMTE4
        MDMwMzE5NTUwNVowgbQxCzAJBgNVBAYTAkNBMRkwFwYDVQQIDBBCcml0aXNoIENv
        bHVtYmlhMREwDwYDVQQHDAhWaWN0b3JpYTE3MDUGA1UECgwuR292ZXJubWVudCBv
        ZiB0aGUgUHJvdmluY2Ugb2YgQnJpdGlzaCBDb2x1bWJpYTEQMA4GA1UECwwHRkxO
        Uk9SRDEsMCoGA1UEAwwjZGV2LWxvd2NhcmJvbmZ1ZWxzLnBhdGhmaW5kZXIuYmNn
        b3YwggF9MA0GCSqGSIb3DQEBAQUAA4IBagAwggFlAoIBXAG9/eTOOvWECOKFcCiZ
        JbdNEviEXFTwxkaeL8c8QAO6hO1gPJ4IesJZIduB+fURxMuqG0alSAhMqxHpbNPh
        ylPbI2mq1OfCztfvZfyxN5eH8Jnp0B2vJ3qBRTbtWIYgXdFtGAKUd4ZFA37p87zu
        Un5GdIpnSJITwnmhlVLMMIMo2Xz1frlOqsTTlGR2hLGsam/dggH3zRrKW8GDWWGJ
        MTOSCGJj+m0wwFQDk6Ln8qVmzlUEIbDzbQo4YWVBZB8/SP6noH+4TnCcGUGMh5vE
        wQYLlUf4e1ZqQ6oTSMDn96IFoQQD2ggZv9zmclue25oh0+PVUEO1mxTrR22M7CVX
        WDvWjzoCs1SL2/QXF1trT2KVtr7Dng4mMxnn4Z8Fu54hQ4dMw7bxYGc+LhVF1ozZ
        Ev0xp7Fh0vpRsPWg0XyvTU9S371OC7jLEQvtIyiWyjObeeJZieVKt3EGAzfB/QID
        AQABMA0GCSqGSIb3DQEBBQUAA4IBXQAABX/H8Wqh6hN+0ik8od69SGULG/dMpuvD
        1Q70m4lv3T6g3mkO1x9MrRyOJSQf7QqDRDd8aIphDTE+fEd1LkTtFOQ/K1RK+ZEK
        QB8KbV8XsygQ6s7lmx3xCSEuwoCc0gMLuxqw841RW8lTxqWDlEnvcYQxQWcw+NQ+
        Ky0pEr3leuIO5LZ2fi7Fi/8Ezf8Ef6rUX3JZ0M26wQExFNAUbHN7x5cPOtgXwQxy
        zEi6O5+yaxnf+PXfM8kcQAChQN3z6pc3Nlv9Xcp2Spu16hRsWxFcDminsM6/9PuJ
        6Li1JSPsXFfuqgkQFRrDZSWvRbS85h+F6/RC9x14fDBw33kQAJyr/yK+0YAZbBfR
        fdnQzLTpYFIBs5tvZv+zGjzVSa+rYhbrhFPrkXxjPzEKiecBQ0aiuRLXfbxtBpT6
        rNuhviM2pnmk9lxV3DNPIUH85n3FVM7arGJ5i9lUtf+UI9A=
        -----END CERTIFICATE-----
      key: |-
        -----BEGIN RSA PRIVATE KEY-----
        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
        QD9lYXa3wU4mqnSvawaJ+g==
        -----END RSA PRIVATE KEY-----
      termination: edge
    to:
      kind: Service
      name: client
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2018-04-17T18:49:22Z
        status: "True"
        type: Admitted
      host: dev-lowcarbonfuels.pathfinder.bcgov
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    name: schema-spy
  spec:
    host: schema-spy-mem-tfrs-dev.pathfinder.gov.bc.ca
    port:
      targetPort: 8080-tcp
    tls:
      insecureEdgeTerminationPolicy: Allow
      termination: edge
    to:
      kind: Service
      name: schema-spy
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2017-11-30T22:19:02Z
        status: "True"
        type: Admitted
      host: schema-spy-mem-tfrs-dev.pathfinder.gov.bc.ca
      routerName: router
      wildcardPolicy: None
- apiVersion: v1
  kind: Route
  metadata:
    creationTimestamp: null
    labels:
      app: request-logger
    name: sminfo
  spec:
    host: dev-lowcarbonfuels.pathfinder.bcgov
    path: /sminfo
    port:
      targetPort: 8080-tcp
    tls:
      certificate: |
        -----BEGIN CERTIFICATE-----
        MIIEnzCCAysCCQCH7hs4MMPNUjANBgkqhkiG9w0BAQUFADCBtDELMAkGA1UEBhMC
        Q0ExGTAXBgNVBAgMEEJyaXRpc2ggQ29sdW1iaWExETAPBgNVBAcMCFZpY3Rvcmlh
        MTcwNQYDVQQKDC5Hb3Zlcm5tZW50IG9mIHRoZSBQcm92aW5jZSBvZiBCcml0aXNo
        IENvbHVtYmlhMRAwDgYDVQQLDAdGTE5ST1JEMSwwKgYDVQQDDCNkZXYtbG93Y2Fy
        Ym9uZnVlbHMucGF0aGZpbmRlci5iY2dvdjAgFw0xODAzMTUyMTM2NDRaGA8yMTE4
        MDIxOTIxMzY0NFowgbQxCzAJBgNVBAYTAkNBMRkwFwYDVQQIDBBCcml0aXNoIENv
        bHVtYmlhMREwDwYDVQQHDAhWaWN0b3JpYTE3MDUGA1UECgwuR292ZXJubWVudCBv
        ZiB0aGUgUHJvdmluY2Ugb2YgQnJpdGlzaCBDb2x1bWJpYTEQMA4GA1UECwwHRkxO
        Uk9SRDEsMCoGA1UEAwwjZGV2LWxvd2NhcmJvbmZ1ZWxzLnBhdGhmaW5kZXIuYmNn
        b3YwggF9MA0GCSqGSIb3DQEBAQUAA4IBagAwggFlAoIBXAGIB7NA3Gx1Bc8CPa6p
        u3dSxxrvGQCYXi1jVE0CcToXtQcNcSAYZVp3fle/ovrOqlFrChp6ZCNPiX2GG48o
        5BGyVuc2sIWZf513OqHmvUJYDGVLMIHNVAdbvmMRbTKBiYQ0ovm6CwJSqKAQbRvA
        +rDPt0MFGOHld8LKTQCIpRFXJZCoOVP8rBvBUmLSqcoMHBoZPvW+2olVC4bZow8Z
        j3fohI6ndA67ZT0L/0FVzem+FUqsVEuImTFNdD3oMZtp77+0WNsccBYAMmO0w0nQ
        v0G1Sg4K3K2UAq+32X2ciTCSZ6yrcH9kOMvsanVt/b/6YIhYLxY+dQfIwCgkYI2C
        TrZ0OYz+kh4Cps416XefUxok/DSu2H2eT1GVpmSGsKig4CchG5LZguDJHwNskDqZ
        lSiajHJF2qqTcdlGoFeRnAlkVgeNp7EH8o51NABP/QaIoq8y6gW0C70lMUq+hQID
        AQABMA0GCSqGSIb3DQEBBQUAA4IBXQAAOrkx/Y2tSfNgBsdWov0QCz9rbDI8gZqZ
        coDjtSsUr6TZf/tfyeUeiLne5fbuBvXq1oW0ANeqwv+YA6bcWiu3yp+JnuE5vfPR
        lxmLx5xwbbORC6t+9tW84mJEtql2G+dUkgLgQea46d/TocBOe716Q7UTvkTgQkTf
        gFaGpbf5fOQdds2Q4ZBN/jAaanvAY6E4g+Fw7fSExcwsdaANR4wMXTZfMZsC29E7
        JKzsbaIA8syTV8jbNRHI6UL7rllV9PVpe8sG0KBwBWfdsetC6XmoySyb7SXHVAIu
        hbK79RQ+EQtJItdTbrA7phwG+BImm1oQumy2qWb3YOK7kngOdCebFbZYjKv/We6x
        hXV0JrhxmbR/BvmPmA5wNcyqPghf5ZJ+NPcbAiaavNSHE6IMcGyku5e8GwCWBxml
        YNjNjkgSf+g+SQC9scqqK4F/qIEq/ygL8slXuJKzq7Z33T0=
        -----END CERTIFICATE-----
      key: |
        -----BEGIN RSA PRIVATE KEY-----
        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
        ZI6RXl7hgbF6zdhjmTMaiI8=
        -----END RSA PRIVATE KEY-----
      termination: edge
    to:
      kind: Service
      name: request-logger
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: 2018-04-13T18:53:04Z
        status: "True"
        type: Admitted
      host: dev-lowcarbonfuels.pathfinder.bcgov
      routerName: router
      wildcardPolicy: None
